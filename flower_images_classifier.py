# -*- coding: utf-8 -*-
"""Flower images classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yChjc1vTp7oCcU0cGSAp_ZW6oCwD-4gQ

# Import Libraries
"""

import tensorflow as tf
from tensorflow import keras
import os
import PIL
import numpy as np
import matplotlib.pyplot as plt

# Download dataset

import pathlib
dataset_url = "https://storage.googleapis.com/download.tensorflow.org/example_images/flower_photos.tgz"

data_dir = keras.utils.get_file('flower_photos',origin=dataset_url, untar=True)

print(os.listdir(data_dir))

data_dir = pathlib.Path(data_dir)
image_count = len(list(data_dir.glob('*/*.jpg')))
print(image_count)

roses = list(data_dir.glob('roses/*'))
PIL.Image.open(str(roses[3]))



"""# Load using keras.preprocessing"""

batch_size = 32
img_height = 180
img_width = 180

train_ds = keras.preprocessing.image_dataset_from_directory(
    data_dir,
    validation_split=0.2,
    subset='training',
    seed = 123,
    image_size =(img_height,img_width),
    batch_size=batch_size)

val_ds = keras.preprocessing.image_dataset_from_directory(
    data_dir,
    validation_split=0.2,
    subset='validation',
    seed = 123,
    image_size = (img_height,img_width),
    batch_size=batch_size)

class_names=train_ds.class_names
print(class_names)



"""# Visualize the data"""

import matplotlib.pyplot as plt

plt.figure(figsize=(10, 10))
for images, labels in train_ds.take(1):
  for i in range(9):
    ax = plt.subplot(3, 3, i + 1)
    plt.imshow(images[i].numpy().astype("uint8"))
    plt.title(class_names[labels[i]])
    plt.axis("off")

# Now as we specified the shape of the images as 180 x 180 hence the images shapes
# Are now as follows:

for image_batch, labels_batch in train_ds:
  print(image_batch.shape)
  break



"""# Creation of Model"""

model = keras.Sequential([
    keras.layers.experimental.preprocessing.Rescaling(1./255, input_shape=(180,180,3)),
    keras.layers.Conv2D(16,3,padding='same',activation='relu'),
    keras.layers.MaxPool2D(),
    keras.layers.Conv2D(32,3,padding='same',activation='relu'),
    keras.layers.MaxPool2D(),
    keras.layers.Conv2D(64,3,padding='same',activation='relu'),
    keras.layers.MaxPool2D(),
    keras.layers.Flatten(),
    keras.layers.Dense(128, activation='relu'),
    keras.layers.Dense(5)])

model.summary()

# Compile the model

model.compile(loss=keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              optimizer='adam',
              metrics=['accuracy'])



"""# Model training"""

history = model.fit(train_ds,validation_data=val_ds,epochs=10)

import matplotlib.pyplot as plt

def plot_graph(history, word):
  plt.plot(history.history[word])
  plt.plot(history.history['val_'+word])
  plt.xlabel('Epochs')
  plt.ylabel(word)
  plt.legend([word, 'val_'+ word])
  plt.show()

plot_graph(history, 'accuracy')
plot_graph(history, 'loss')



"""### Basically we can see that our model is overfitting clearly and thus we need to reduce this"""



"""# Data Augmentation"""

data_augmentation = keras.Sequential([
      keras.layers.experimental.preprocessing.RandomFlip('horizontal',input_shape=(img_height,img_width,3)),
      keras.layers.experimental.preprocessing.RandomRotation(0.2),
      keras.layers.experimental.preprocessing.RandomZoom(0.2)
])

plt.figure(figsize=(10, 10))
for images, _ in train_ds.take(1):
  for i in range(9):
    augmented_images = data_augmentation(images)
    ax = plt.subplot(3, 3, i + 1)
    plt.imshow(augmented_images[0].numpy().astype("uint8"))
    plt.axis("off")



"""# Final model using Data Augmentation and Dropout"""

model = keras.Sequential([
    data_augmentation,
    keras.layers.experimental.preprocessing.Rescaling(1./255, input_shape=(180,180,3)),
    keras.layers.Conv2D(16,3,padding='same',activation='relu'),
    keras.layers.MaxPool2D(),
    keras.layers.Conv2D(32,3,padding='same',activation='relu'),
    keras.layers.MaxPool2D(),
    keras.layers.Conv2D(64,3,padding='same',activation='relu'),
    keras.layers.MaxPool2D(),
    keras.layers.Dropout(0.2),
    keras.layers.Flatten(),
    keras.layers.Dense(128, activation='relu'),
    keras.layers.Dense(5)
])

model.summary()



"""# Compiling, training and visualization of Model"""

model.compile(optimizer='adam',
              loss=keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

history = model.fit(train_ds,
                    validation_data = val_ds,
                    epochs= 15)

import matplotlib.pyplot as plt

def plot_graph(history, word):
  plt.plot(history.history[word])
  plt.plot(history.history['val_'+word])
  plt.xlabel('Epochs')
  plt.ylabel(word)
  plt.legend([word, 'val_'+ word])
  plt.show()

plot_graph(history, 'accuracy')
plot_graph(history, 'loss')



"""# Predict on new Data"""

# tulip_url = "https://diy.sndimg.com/content/dam/images/diy/fullset/2017/10/9/0/CI_iBulb_Mixed-tulips.jpg.rend.hgtvcom.1280.1280.suffix/1507554670764.jpeg"
# tulip_path = tf.keras.utils.get_file('Mixed_tulips', origin=tulip_url)

daisy_url = 'https://www.gardeningknowhow.com/wp-content/uploads/2020/06/daisies-2.jpg'
daisy_path = keras.utils.get_file('Daisies', origin = daisy_url)

img = keras.preprocessing.image.load_img(
    daisy_path, target_size=(img_height, img_width)
)
img_array = keras.preprocessing.image.img_to_array(img)
img_array = tf.expand_dims(img_array, 0) # Create a batch

predictions = model.predict(img_array)
score = tf.nn.softmax(predictions[0])

plt.imshow(img)

print(
    "This image most likely belongs to {} with a {:.2f} percent confidence."
    .format(class_names[np.argmax(score)], 100 * np.max(score))
)

